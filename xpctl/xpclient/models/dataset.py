# coding: utf-8

"""
    xpctl

    This is a sample xpctl  server.  You can find out more about xpctl at [baseline](https://github.com/dpressel/baseline/blob/master/docs/xpctl.md).  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from xpctl.xpclient.models.datafile import Datafile  # noqa: F401,E501


class Dataset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'train_files': 'list[Datafile]',
        'valid_files': 'list[Datafile]',
        'test_files': 'list[Datafile]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'train_files': 'train_files',
        'valid_files': 'valid_files',
        'test_files': 'test_files'
    }

    def __init__(self, id=None, name=None, train_files=None, valid_files=None, test_files=None):  # noqa: E501
        """Dataset - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._train_files = None
        self._valid_files = None
        self._test_files = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.train_files = train_files
        self.valid_files = valid_files
        self.test_files = test_files

    @property
    def id(self):
        """Gets the id of this Dataset.  # noqa: E501


        :return: The id of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dataset.


        :param id: The id of this Dataset.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Dataset.  # noqa: E501


        :return: The name of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Dataset.


        :param name: The name of this Dataset.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def train_files(self):
        """Gets the train_files of this Dataset.  # noqa: E501


        :return: The train_files of this Dataset.  # noqa: E501
        :rtype: list[Datafile]
        """
        return self._train_files

    @train_files.setter
    def train_files(self, train_files):
        """Sets the train_files of this Dataset.


        :param train_files: The train_files of this Dataset.  # noqa: E501
        :type: list[Datafile]
        """
        if train_files is None:
            raise ValueError("Invalid value for `train_files`, must not be `None`")  # noqa: E501

        self._train_files = train_files

    @property
    def valid_files(self):
        """Gets the valid_files of this Dataset.  # noqa: E501


        :return: The valid_files of this Dataset.  # noqa: E501
        :rtype: list[Datafile]
        """
        return self._valid_files

    @valid_files.setter
    def valid_files(self, valid_files):
        """Sets the valid_files of this Dataset.


        :param valid_files: The valid_files of this Dataset.  # noqa: E501
        :type: list[Datafile]
        """
        if valid_files is None:
            raise ValueError("Invalid value for `valid_files`, must not be `None`")  # noqa: E501

        self._valid_files = valid_files

    @property
    def test_files(self):
        """Gets the test_files of this Dataset.  # noqa: E501


        :return: The test_files of this Dataset.  # noqa: E501
        :rtype: list[Datafile]
        """
        return self._test_files

    @test_files.setter
    def test_files(self, test_files):
        """Sets the test_files of this Dataset.


        :param test_files: The test_files of this Dataset.  # noqa: E501
        :type: list[Datafile]
        """
        if test_files is None:
            raise ValueError("Invalid value for `test_files`, must not be `None`")  # noqa: E501

        self._test_files = test_files

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Dataset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dataset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
