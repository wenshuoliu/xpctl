# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from xpserver.models.base_model_ import Model
from xpserver.models.datafile import Datafile  # noqa: F401,E501
from xpserver import util


class Dataset(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, train_files=None, valid_files=None, test_files=None):  # noqa: E501
        """Dataset - a model defined in Swagger

        :param id: The id of this Dataset.  # noqa: E501
        :type id: str
        :param name: The name of this Dataset.  # noqa: E501
        :type name: str
        :param train_files: The train_files of this Dataset.  # noqa: E501
        :type train_files: List[Datafile]
        :param valid_files: The valid_files of this Dataset.  # noqa: E501
        :type valid_files: List[Datafile]
        :param test_files: The test_files of this Dataset.  # noqa: E501
        :type test_files: List[Datafile]
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'train_files': List[Datafile],
            'valid_files': List[Datafile],
            'test_files': List[Datafile]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'train_files': 'train_files',
            'valid_files': 'valid_files',
            'test_files': 'test_files'
        }

        self._id = id
        self._name = name
        self._train_files = train_files
        self._valid_files = valid_files
        self._test_files = test_files

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Dataset of this Dataset.  # noqa: E501
        :rtype: Dataset
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Dataset.


        :return: The id of this Dataset.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dataset.


        :param id: The id of this Dataset.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Dataset.


        :return: The name of this Dataset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Dataset.


        :param name: The name of this Dataset.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def train_files(self):
        """Gets the train_files of this Dataset.


        :return: The train_files of this Dataset.
        :rtype: List[Datafile]
        """
        return self._train_files

    @train_files.setter
    def train_files(self, train_files):
        """Sets the train_files of this Dataset.


        :param train_files: The train_files of this Dataset.
        :type train_files: List[Datafile]
        """
        if train_files is None:
            raise ValueError("Invalid value for `train_files`, must not be `None`")  # noqa: E501

        self._train_files = train_files

    @property
    def valid_files(self):
        """Gets the valid_files of this Dataset.


        :return: The valid_files of this Dataset.
        :rtype: List[Datafile]
        """
        return self._valid_files

    @valid_files.setter
    def valid_files(self, valid_files):
        """Sets the valid_files of this Dataset.


        :param valid_files: The valid_files of this Dataset.
        :type valid_files: List[Datafile]
        """
        if valid_files is None:
            raise ValueError("Invalid value for `valid_files`, must not be `None`")  # noqa: E501

        self._valid_files = valid_files

    @property
    def test_files(self):
        """Gets the test_files of this Dataset.


        :return: The test_files of this Dataset.
        :rtype: List[Datafile]
        """
        return self._test_files

    @test_files.setter
    def test_files(self, test_files):
        """Sets the test_files of this Dataset.


        :param test_files: The test_files of this Dataset.
        :type test_files: List[Datafile]
        """
        if test_files is None:
            raise ValueError("Invalid value for `test_files`, must not be `None`")  # noqa: E501

        self._test_files = test_files
